import { useState, useEffect } from "react";
import { useCart } from "../context/CartContext";
import { useNavigate } from "react-router-dom";
import { CartItem } from "../interfaces/Caritem";

function Checkout() {
  const { cart, clearCart } = useCart();
  const navigate = useNavigate();
  const [token, setToken] = useState<string | null>(null);
  const [customerInfo, setCustomerInfo] = useState({
    name: "",
    phone: "",
    address: "",
  });

  useEffect(() => {
    const savedToken = localStorage.getItem("token");
    setToken(savedToken);
  }, []);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setCustomerInfo((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  const validatePhone = (phone: string): boolean => {
    return /^(0[3-9])[0-9]{8}$/.test(phone);
  };

  const handlePayment = async () => {
    if (!customerInfo.name || !customerInfo.phone || !customerInfo.address) {
      alert("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!");
      return;
    }
    if (!validatePhone(customerInfo.phone)) {
      alert("S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá!");
      return;
    }
    if (!token) {
      alert("B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p! H√£y ƒëƒÉng nh·∫≠p tr∆∞·ªõc khi thanh to√°n.");
      navigate("/login");
      return;
    }

    const orderData = {
      customer: customerInfo,
      items: cart,
      total: cart.reduce((sum, item) => sum + item.price * (item.quantity || 1), 0),
      status: "ƒêang x·ª≠ l√Ω",
      createdAt: new Date().toISOString(),
    };

    try {
      const response = await fetch("http://localhost:3000/orders", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify(orderData),
      });

      if (!response.ok) throw new Error("L·ªói khi ƒë·∫∑t h√†ng!");

      alert("üéâ ƒê·∫∑t h√†ng th√†nh c√¥ng! B·∫°n s·∫Ω thanh to√°n khi nh·∫≠n h√†ng.");
      clearCart();
      navigate("/");
    } catch (error) {
      console.error("L·ªói:", error);
      alert("C√≥ l·ªói x·∫£y ra! Vui l√≤ng th·ª≠ l·∫°i.");
    }
  };

  return (
    <div className="container mt-4 text-black"> {/* Th√™m class text-white ƒë·ªÉ ƒë·ªïi m√†u ph√¥ng ch·ªØ */}
      <h2>üõçÔ∏è Thanh to√°n</h2>

      {cart.length === 0 ? (
        <p>Gi·ªè h√†ng tr·ªëng! H√£y th√™m s·∫£n ph·∫©m tr∆∞·ªõc khi thanh to√°n.</p>
      ) : (
        <div>
          <h4>Th√¥ng tin ƒë∆°n h√†ng</h4>
          <ul className="list-group">
            {cart.map((item: CartItem) => (
              <li key={item.id} className="list-group-item d-flex justify-content-between align-items-center ">
                <img src={item.thumbnail} alt={item.name} style={{ width: "50px", height: "50px" }} />
                <span>{item.name}</span>
                <span>{item.price.toLocaleString()} VNƒê</span>
                <span>x{item.quantity || 1}</span>
              </li>
            ))}
          </ul>

          <h4 className="mt-4">Th√¥ng tin kh√°ch h√†ng</h4>
          <input type="text" name="name" className="form-control mb-2" placeholder="H·ªç v√† t√™n" onChange={handleInputChange} />
          <input type="text" name="phone" className="form-control mb-2" placeholder="S·ªë ƒëi·ªán tho·∫°i" onChange={handleInputChange} />
          <input type="text" name="address" className="form-control mb-2" placeholder="ƒê·ªãa ch·ªâ nh·∫≠n h√†ng" onChange={handleInputChange} />

          <button className="btn btn-success mt-3" onClick={handlePayment}>
            ‚úÖ X√°c nh·∫≠n ƒë∆°n h√†ng
          </button>
        </div>
      )}
    </div>
  );
}

export default Checkout;